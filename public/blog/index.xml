<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on leo9827</title>
    <link>http://localhost:1313/blog/</link>
    <description>Recent content in Blogs on leo9827</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>2023 leo9827 All rights reserved</copyright>
    <lastBuildDate>Mon, 01 Apr 2024 23:10:08 +0800</lastBuildDate><atom:link href="http://localhost:1313/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>提升系统可用性</title>
      <link>http://localhost:1313/blog/improve-system-avaliabilty/</link>
      <pubDate>Mon, 01 Apr 2024 23:10:08 +0800</pubDate>
      
      <guid>http://localhost:1313/blog/improve-system-avaliabilty/</guid>
      <description>&lt;p&gt;提高可用性，应该从&lt;strong&gt;全局&lt;/strong&gt;，而非单点技术考虑（包括研发流程、团队文化等），提升可用性是一个过程，需要长时间的积累。文章简要介绍高可用架构设计关键点，希望对在做系统架构设计的新同学有一点帮助，能够对系统可用性有个整体认知。.&lt;/p&gt;
&lt;h2 id=&#34;1概述&#34;&gt;1.概述&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;架构设计一个处理软件复杂度的过程，同时应该遵循TradeOff原则，结合项目实际情况落地增强系统可用性&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;11-可用性-vs-可靠性&#34;&gt;1.1. 可用性 vs 可靠性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可用性(N个9表述): 系统可用的时间，以丢失的时间为驱动，公式: &lt;code&gt;PA=Uptime/(Uptime+Downtime)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Uptime&lt;/code&gt;: 系统可用时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Downtime&lt;/code&gt;: 系统不可用时间&lt;/li&gt;
&lt;li&gt;可靠性: 系统无失效时间间隔，以发生的失效个数作为驱动，公式: &lt;code&gt;PA=MTBF/(MTBF+MTTR）&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MTBF&lt;/code&gt;: 平均故障时间(mean time between faiulre)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MTTR&lt;/code&gt;: 平均故障修复时间(mean time to repair)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;可用性等级:&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;等级&lt;/th&gt;
&lt;th&gt;几个9&lt;/th&gt;
&lt;th&gt;年停机时长&lt;/th&gt;
&lt;th&gt;常用技术&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;基本可用&lt;/td&gt;
&lt;td&gt;99%&lt;/td&gt;
&lt;td&gt;87.6h&lt;/td&gt;
&lt;td&gt;负载均衡&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;较高可用&lt;/td&gt;
&lt;td&gt;99.9%&lt;/td&gt;
&lt;td&gt;8.8h&lt;/td&gt;
&lt;td&gt;灰度发布、快速回滚、自动化发布&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;高级可用&lt;/td&gt;
&lt;td&gt;99.99%&lt;/td&gt;
&lt;td&gt;53min&lt;/td&gt;
&lt;td&gt;微服务、数据库、缓存集群、容错、监控、弹性伸缩&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;极高可用&lt;/td&gt;
&lt;td&gt;99.999%&lt;/td&gt;
&lt;td&gt;5min&lt;/td&gt;
&lt;td&gt;异地多活、智能运维&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;12-可用性减低的原因&#34;&gt;1.2. 可用性减低的原因&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;发布: 服务升级、数据迁移导致服务可能中断，&lt;strong&gt;80%的故障是由于发布造成的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;故障: 服务Bug、系统宕机、内存溢出、网络波动等导致服务可能中断&lt;/li&gt;
&lt;li&gt;压力: 突发事件导致服务处理不过来，导致服务中断&lt;/li&gt;
&lt;li&gt;外部依赖： 外部依赖服务故障，导致调用异常&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;13-提升高可用原则&#34;&gt;1.3. 提升高可用原则&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;20/10/5原则&lt;/strong&gt;，提升系统架构高可用的上限&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Design for fail原则&lt;/strong&gt;，提升系统韧性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;知己知彼原则&lt;/strong&gt;，提升系统透明度，识别系统潜在风险，提前做好预案&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-服务发布&#34;&gt;2. 服务发布&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;思考切尔诺贝利事件，流程操作规范的重要性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;发布关注点&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发布流程CheckList、CR&lt;/li&gt;
&lt;li&gt;发布策略: 错峰、灰度流量逐步放开&lt;/li&gt;
&lt;li&gt;回滚策略: 异常问题及时回滚&lt;/li&gt;
&lt;li&gt;运维值守&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;21-成熟机制和流程&#34;&gt;2.1. 成熟机制和流程&lt;/h3&gt;
&lt;h4 id=&#34;211-蓝绿部署&#34;&gt;2.1.1. 蓝绿部署&lt;/h4&gt;
&lt;p&gt;部署蓝绿两套集群，通过负载均衡关联，新旧蓝绿交替滚动发布，回退简单，负载均衡切换到旧版本即可（&lt;strong&gt;&lt;em&gt;当存在数据隔离后，实际情况操作比较复杂&lt;/em&gt;&lt;/strong&gt;），相关特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动化基础设施依赖&lt;/li&gt;
&lt;li&gt;全面监控&lt;/li&gt;
&lt;li&gt;两套环境隔离，有相互影响风险（比如: 存储服务无法很好蓝绿处理）&lt;/li&gt;
&lt;li&gt;难点数据结构变更，如何同步数据，故障时候，如何回滚&lt;/li&gt;
&lt;li&gt;支持流量快速切换（实际有困难）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;212-灰度发布金丝雀发布&#34;&gt;2.1.2. 灰度发布/金丝雀发布&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;流程:从负载均衡剔除节点(流量踢干净)、节点升级、自动化接口测试、加入负载均衡、监控故障、逐步灰度其他节点&lt;/li&gt;
&lt;li&gt;意义:减少故障范围、尽早用户反馈和数据收集&lt;/li&gt;
&lt;li&gt;灰度控制:&lt;strong&gt;内部-&amp;gt;外部1%-&amp;gt;5%-&amp;gt;10%-&amp;gt;全网&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-容错设计-design-for-failure&#34;&gt;3. 容错设计 Design for failure&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;容错设计是为了确保错误发生时，能够从容应对&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;31-消除单点&#34;&gt;3.1. 消除单点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;服务冗余设计&lt;/li&gt;
&lt;li&gt;服务无状态&lt;/li&gt;
&lt;li&gt;故障转移（比如nginx+keepalive、redis哨兵、mysql主从切换）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;33-服务分级&#34;&gt;3.3. 服务分级&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;产品功能梳理核心流程，找到核心服务，划分等级，确认服务关键程度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;服务级别&lt;/th&gt;
&lt;th&gt;划分依据&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1级服务&lt;/td&gt;
&lt;td&gt;核心业务流程，一旦故障业务遭受重大损失&lt;/td&gt;
&lt;td&gt;注册、登录、支付&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2级服务&lt;/td&gt;
&lt;td&gt;用户体验影响严重，一旦故障，关键业务还可用，用户体验影响严重&lt;/td&gt;
&lt;td&gt;搜索、评论&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3级服务&lt;/td&gt;
&lt;td&gt;用户体验影响轻微，一旦故障，正常流程不受影响，不常用的功能不可用&lt;/td&gt;
&lt;td&gt;个人信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4级服务&lt;/td&gt;
&lt;td&gt;多为管理维护，用户不受影响，用户不会直接访问&lt;/td&gt;
&lt;td&gt;统计、排行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;34-服务降级设计&#34;&gt;3.4. 服务降级设计&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;服务降级前置条件是先梳理清楚服务核心等级，预先配置中心定义好降级开关&lt;/li&gt;
&lt;li&gt;降级方式
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;关闭功能&lt;/strong&gt;: 业务JS控制少掉了某个功能&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求短路&lt;/strong&gt;：返回缓存数据&lt;/li&gt;
&lt;li&gt;简化流程：注册成功的提示短信不发&lt;/li&gt;
&lt;li&gt;延迟执行: 比如定时任务&lt;/li&gt;
&lt;li&gt;关闭定时任务&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;低精确度返回&lt;/strong&gt;：比如报名人数、在线人数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;35-超时重试&#34;&gt;3.5. 超时重试&lt;/h3&gt;
&lt;p&gt;主调服务请求被动服务，可能存在成功、失败、超时3类状态，频繁发起重试，可能加重消费者负担，造成更严重的事故。&lt;/p&gt;
&lt;p&gt;重试策略的关键因子:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;超时时间: 包括调用超时时间、下游服务处理时间&lt;/li&gt;
&lt;li&gt;重试总次数（retrycount）：多次重试可能对下游造成更大压力&lt;/li&gt;
&lt;li&gt;重试间隔时间（intervalTimey）：间隔多久重试&lt;/li&gt;
&lt;li&gt;重试间隔时间衰减（weakTime）: 时间退避/衰减算法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;重试模式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;简单重试&lt;/strong&gt;：try-catch-redo，重试一次&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;策略重试&lt;/strong&gt;: try-catch-redo-retry straegy，重试策略决定是否重试，关键因子(retrycount、intervalTimey、weakTime)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;重试模式比较通用，尝试对业务解耦&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;何种条件重试: 符合指定策略才重试&lt;/li&gt;
&lt;li&gt;何时重试: 立即重试、间隔重试、时间衰减重试、随机退避重试&lt;/li&gt;
&lt;li&gt;重试次数：不超过重试次数最大限度重试&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;36-隔离策略&#34;&gt;3.6. 隔离策略&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;进程、线程池&lt;/li&gt;
&lt;li&gt;机器隔离&lt;/li&gt;
&lt;li&gt;集群隔离&lt;/li&gt;
&lt;li&gt;地域隔离&lt;/li&gt;
&lt;li&gt;用户、租户隔离&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;37-熔断器防止雪崩&#34;&gt;3.7. 熔断器（防止雪崩）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;服务雪崩：服务提供者的不可用导致服务消费者也不可用，并将不可用逐级放大的过程。&lt;br&gt;
熔断器就是放在主调服务一侧，阻断主调请求避免对下游服务提供者造成压力。当被调大量超时下，主调服务主动熔断，防止服务进一步拖垮，一旦情况变好，主调重新尝试，最终让系统恢复&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;熔断器三种状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开: 断路状态，调用请求被禁止，快速失败/业务降级返回&lt;/li&gt;
&lt;li&gt;闭合: 通路状态，调用请求被允许放行；当在闭合下，区间时间内累计错误次数达到阈值，则将闭合状态变为打开状态，服务被熔断&lt;/li&gt;
&lt;li&gt;半打开：熔断器允许部分请求到达下游，当在半打开下，若依旧有调用失败，则返回打开状态；若请求顺利，调用成功，则返回到闭合状态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;禁止一个熔断器控制多个服务&lt;/li&gt;
&lt;li&gt;熔断后，主调方应该做好快速失败、业务降级、不显示/显示缓存值返回&lt;/li&gt;
&lt;li&gt;任务干预，支持通过开关预留，这次手动强制开启或关闭熔断器&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-流控设计过载保护&#34;&gt;4. 流控设计（过载保护）&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;流控，通过流量控制保护服务自身免被压垮，起到超出部分被拒绝，承受范围内请求被正常处理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;41-限流算法&#34;&gt;4.1. 限流算法&lt;/h3&gt;
&lt;h4 id=&#34;411-固定窗口fixed-window&#34;&gt;4.1.1. 固定窗口(fixed window)&lt;/h4&gt;
&lt;p&gt;每个时间片内窗口内，允许访问的总次数。&lt;/p&gt;
&lt;p&gt;缺点是算法存在临界值2倍限流量情况，同时在下个时间片内出容易现流量蜂拥，容易形成踩踏现象&lt;/p&gt;
&lt;h4 id=&#34;412-漏桶算法leaky-bucket&#34;&gt;4.1.2. 漏桶算法(Leaky Bucket)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;水流入(请求生产): 漏入桶中，桶满则溢出&lt;/li&gt;
&lt;li&gt;漏桶(队列): FIFO队列&lt;/li&gt;
&lt;li&gt;水流出(请求消费): 以一定速率从桶内取出请求消费&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;适用场景: 秒杀场景，削峰填谷&lt;/p&gt;
&lt;h4 id=&#34;413-令牌桶算法token-buket&#34;&gt;4.1.3. 令牌桶算法(Token Buket)&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;一个时间窗口内通过的数据量，通过以QPS、TPS衡量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;创建一个可放指定数量(M)令牌的桶（队列）&lt;/li&gt;
&lt;li&gt;每间隔一定时间片，放入一个令牌到桶中（定时令牌生成器），桶满则溢出&lt;/li&gt;
&lt;li&gt;每当R个请求到达时，从桶内取出min(M,R)个令牌，若桶内令牌不够，则将请求缓存或者丢弃（对比网卡的环形队列作用）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;42-流控策略&#34;&gt;4.2. 流控策略&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;需要配合压测结果、资源环境，对每个服务单独进行配置，一般采用经验值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;流控的几点注意:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;尽量在请求入口处做收拢，比如GW层(nginx)、业务出入口、公共基础服务&lt;/li&gt;
&lt;li&gt;流控阈值可能会随着服务的迭代也会变化，比如迭代后服务耗时增加了，那么对应的流控速率就应该更小了，这点需要注意&lt;/li&gt;
&lt;li&gt;阈值不要设置过大，否则起不到流控作用&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;44-容量预估&#34;&gt;4.4. 容量预估&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;对系统容量做到知根知底，ab、LoadRunner、Jmeter这类都比较片面，很难系统模拟生产环境数据，采用全链路可以规避这些问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;全链路压测进行容量评估，几点注意:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;核心流程：28原则，确保真正核心的流程被压测到，这里就需要有张整体的服务调用网络拓扑图，并梳理出核心链路&lt;/li&gt;
&lt;li&gt;隔离方式：独立压测环境，压测效果和隔离效果好，但成本高；生产混合，通过参数识别，在框架和服务处染色处理，资源隔离性不好；&lt;/li&gt;
&lt;li&gt;缩小依赖范围：这样可以更加有的放矢，识别链路的关键瓶颈&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;PS: 链路有短板效应，需要准确的识别到链路的短板，方便后期做好性能提升，增加系统整体吞吐&lt;/p&gt;
&lt;h2 id=&#34;5-故障演练---chaos&#34;&gt;5. 故障演练 - Chaos&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The best way to avoid failure is to fail constantly&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;故障演练可以检测业务应用处理失败的能力，以及团队对故障的应对反应(包括通过监控日志、快速故障定位、应急措施），避免当故障真正发生时候，团队人员手忙脚乱，不知所措。&lt;/p&gt;
&lt;h2 id=&#34;6-数据迁移---目标是zero-downtime&#34;&gt;6. 数据迁移 - 目标是Zero Downtime&lt;/h2&gt;
&lt;p&gt;做数据迁移时候，也可能对系统可用性有影响，目标是无停机时间，常见迁移方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逻辑分离，物理不分离
&lt;ul&gt;
&lt;li&gt;新老服务，双写同一个数据库/缓存不同表&lt;/li&gt;
&lt;li&gt;过渡方案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;逻辑分析力，物理分离
&lt;ul&gt;
&lt;li&gt;需要做数据同步，比如通过工具读取binlog实现数据双向同步&lt;/li&gt;
&lt;li&gt;业务应用同时写两个库&lt;/li&gt;
&lt;li&gt;老系统写消息通过写到消息中间件，消费消息中间件实现同步&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关键问题: 数据一致性问题&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我的学习方法</title>
      <link>http://localhost:1313/blog/my-study-method/</link>
      <pubDate>Mon, 01 Apr 2024 23:08:12 +0800</pubDate>
      
      <guid>http://localhost:1313/blog/my-study-method/</guid>
      <description>&lt;p&gt;我正在使用的一些学习方法和理论.&lt;/p&gt;
&lt;h2 id=&#34;学习方法&#34;&gt;学习方法&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://wiki.mbalib.com/zh-tw/%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95&#34;&gt;费曼学习法&lt;/a&gt;：把你学的东西&lt;strong&gt;讲给别人听&lt;/strong&gt;，能讲清楚就是学会了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/99450064&#34;&gt;西蒙学习法&lt;/a&gt;：&lt;strong&gt;确定&lt;/strong&gt;学习目标，&lt;strong&gt;拆分&lt;/strong&gt;目标，6 个月能精通任意领域。&lt;/p&gt;
&lt;p&gt;番茄学习法：&lt;strong&gt;规划&lt;/strong&gt;学习和休息时间，定闹钟。&lt;/p&gt;
&lt;p&gt;康奈尔笔记法：将笔记分成&lt;strong&gt;三部分&lt;/strong&gt;——内容整理、发现感想、总结。&lt;/p&gt;
&lt;p&gt;SQ3R 阅读法：浏览、提问、阅读、回忆、复习。&lt;/p&gt;
&lt;h2 id=&#34;快速上手一个领域&#34;&gt;快速上手一个领域：&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;做wiki&lt;/strong&gt;：整理现状的wiki&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;带着答案找答案&lt;/strong&gt;：有问题时，不要着急提问，停下来思考一下，带着(自己的)答案去找答案/咨询更好&lt;/p&gt;
&lt;h2 id=&#34;碎片时间的利用&#34;&gt;碎片时间的利用&lt;/h2&gt;
&lt;p&gt;碎片时间系统学习：碎片的时间不要碎片化利用（看博客之类），而是要进行系统化学习，比如利用碎片时间学习操作系统，每个碎片时间学习其中的某一个章节，积少成多。&lt;/p&gt;
&lt;h2 id=&#34;知识错觉&#34;&gt;知识错觉&lt;/h2&gt;
&lt;p&gt;最近的一项研究表明，互联网可能会助长人们的&amp;quot;知识错觉&amp;quot;，过度自信自己的技能水平。&lt;/p&gt;
&lt;p&gt;研究人员让实验的参与者，重复观看某种技能的视频，例如投飞镖或者跳霹雳舞的视频，最多可以看20次。&lt;/p&gt;
&lt;p&gt;看完以后，参与者需要预估一下，自己对这项技能的掌握程度。&lt;/p&gt;
&lt;p&gt;大多数人表示，通过观看视频，他们已经一定程度上掌握了该项技能。而且，观看视频次数越多的人，回答越确定，自信心越强。&lt;/p&gt;
&lt;p&gt;然后，每个人需要当众展示该项技能。结果令人非常失望，他们显然都没有掌握。研究人员说&amp;quot;他们的实际表现没有显示出任何学会的迹象。&amp;quot;&lt;/p&gt;
&lt;p&gt;程序员尤其要小心这种错觉，千万不要看完教材或文档，就认为自己掌握了某项技能，一定要自己动手用它做过项目，才算学会。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to study</title>
      <link>http://localhost:1313/blog/how-to-study/</link>
      <pubDate>Mon, 01 Apr 2024 23:04:53 +0800</pubDate>
      
      <guid>http://localhost:1313/blog/how-to-study/</guid>
      <description>&lt;p&gt;如何快速上手一个领域? 常用学习方法&lt;/p&gt;
&lt;h2 id=&#34;学习方法&#34;&gt;学习方法&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://wiki.mbalib.com/zh-tw/%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95&#34;&gt;费曼学习法&lt;/a&gt;：把你学的东西&lt;strong&gt;讲给别人听&lt;/strong&gt;，能讲清楚就是学会了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/99450064&#34;&gt;西蒙学习法&lt;/a&gt;：&lt;strong&gt;确定&lt;/strong&gt;学习目标，&lt;strong&gt;拆分&lt;/strong&gt;目标，6 个月能精通任意领域。&lt;/p&gt;
&lt;p&gt;番茄学习法：&lt;strong&gt;规划&lt;/strong&gt;学习和休息时间，定闹钟。&lt;/p&gt;
&lt;p&gt;康奈尔笔记法：将笔记分成&lt;strong&gt;三部分&lt;/strong&gt;——内容整理、发现感想、总结。&lt;/p&gt;
&lt;p&gt;SQ3R 阅读法：浏览、提问、阅读、回忆、复习。&lt;/p&gt;
&lt;h2 id=&#34;快速上手一个领域&#34;&gt;快速上手一个领域：&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;做wiki&lt;/strong&gt;：整理现状的wiki&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;带着答案找答案&lt;/strong&gt;：有问题时，不要着急提问，停下来思考一下，带着(自己的)答案去找答案/咨询更好&lt;/p&gt;
&lt;h2 id=&#34;碎片时间的利用&#34;&gt;碎片时间的利用&lt;/h2&gt;
&lt;p&gt;碎片时间系统学习：碎片的时间不要碎片化利用（看博客之类），而是要进行系统化学习，比如利用碎片时间学习操作系统，每个碎片时间学习其中的某一个章节，积少成多。&lt;/p&gt;
&lt;h2 id=&#34;知识错觉&#34;&gt;知识错觉&lt;/h2&gt;
&lt;p&gt;最近的一项研究表明，互联网可能会助长人们的&amp;quot;知识错觉&amp;quot;，过度自信自己的技能水平。&lt;/p&gt;
&lt;p&gt;研究人员让实验的参与者，重复观看某种技能的视频，例如投飞镖或者跳霹雳舞的视频，最多可以看20次。&lt;/p&gt;
&lt;p&gt;看完以后，参与者需要预估一下，自己对这项技能的掌握程度。&lt;/p&gt;
&lt;p&gt;大多数人表示，通过观看视频，他们已经一定程度上掌握了该项技能。而且，观看视频次数越多的人，回答越确定，自信心越强。&lt;/p&gt;
&lt;p&gt;然后，每个人需要当众展示该项技能。结果令人非常失望，他们显然都没有掌握。研究人员说&amp;quot;他们的实际表现没有显示出任何学会的迹象。&amp;quot;&lt;/p&gt;
&lt;p&gt;程序员尤其要小心这种错觉，千万不要看完教材或文档，就认为自己掌握了某项技能，一定要自己动手用它做过项目，才算学会。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>管理你的时间</title>
      <link>http://localhost:1313/blog/manage-your-time/</link>
      <pubDate>Mon, 01 Apr 2024 23:00:35 +0800</pubDate>
      
      <guid>http://localhost:1313/blog/manage-your-time/</guid>
      <description>&lt;p&gt;时间管理和自我成长密不可分，如何分配我们所拥有的时间极为重要，这决定了我们去向何方&lt;/p&gt;
&lt;h1 id=&#34;就一句话不能懒&#34;&gt;就一句话：不能懒&lt;/h1&gt;
&lt;p&gt;德鲁克把自我管理、特别是时间管理放在管理课题的第一位，也是自我提升的一个重要前提，是很有道理的。记得刚刚来腾讯的时候，在部门分享的第一门课也是《时间管理：如何做一个高效率的人》，可能比较适合刚毕业不久的小朋友、或者受困于时间管理&amp;amp;成长发展的同学，其中有一些要点供你参考：&lt;/p&gt;
&lt;h2 id=&#34;110自己的时间习惯养成&#34;&gt;&lt;strong&gt;1、10%自己的时间=习惯养成&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;无论多么忙，每天都有一个刚性的时间属于自己，用于学习、或者放空，这一点其实本质是意志和习惯养成问题，并无捷径。我个人坚持了近20年，但是，我目标性不强，就是学各种乱七八糟的知识，有广度、无深度。有同学说，那我回家已经很累了，坚持不了怎么办？可以看看习惯养成的书，《一万小时定律》《微习惯》等等。&lt;/p&gt;
&lt;h2 id=&#34;27-2-1强制排序&#34;&gt;&lt;strong&gt;2、7-2-1=强制排序&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;重要-紧急四象限其实大家都知道，但是，有一个问题是，很多人并没有合理赋权。重要紧急的事情肯定是要保障的，投入超额精力是合理的，但是这种事情并不多；紧急不重要的事，需要快速解决，但是不要消耗太多时间，敢于降低标准；而大量的不重要不紧急的事情，真的是该砍则砍、该压则压，擅长Say-no；只有这样，才能把重要不紧急的事情，比如成长、放空的时间腾出来。可以每周、每天放个小的Sticker在工位上，按优先级如7-2-1排序，久了也就不需要放了，因为心里都非常清楚了。&lt;/p&gt;
&lt;h2 id=&#34;3番茄工作法擅长用碎片化时间&#34;&gt;&lt;strong&gt;3、番茄工作法=擅长用碎片化时间&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;人在江湖，身不由己。工作场景下，大块的不受干扰的时间越来越少，所以如何有效使用碎片化时间变得非常重要，番茄工作法是比较有效的。大多数小事都可以集中在一个时段里完成，特别需要大块时间完成的，则需要提前把会议、沟通安排好，一定很专注地去对待。&lt;/p&gt;
&lt;p&gt;时间管理是前提，下面可以聊聊学习地事情。&lt;/p&gt;
&lt;h2 id=&#34;4从工作里学习有规划地多干活&#34;&gt;&lt;strong&gt;4、从工作里学习=有规划地多干活&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;毕竟工作是占据时间最多的部分，所以，真正地成长首先还是要来自于于在场景里学习。这一点要摆正心态，在干某个工作地时候，一定要干一行、爱一行，&lt;strong&gt;这个爱字，不等于内心喜欢，而是说要投入、用心，只有这样才能不荒废时间&lt;/strong&gt;；&lt;strong&gt;与此同时，要抬头看路，有规划、有选择地干活&lt;/strong&gt;，比如，很多不断重复地工作是不容易成长的，做了2、3年后可以和领导申请、活水、甚至换工作；比如，不承担责任的事情成长是比较慢的，所以，并不需要加薪，也要尽量多承担责任，因为唯有在那个角色上，才能设身处地、激发潜能，很多时候创业公司、新兴业务得到的锻炼比较多；比如，没有长期目标的工作，往往是意义比较小的，你当前这个工作，从长期看，目标在哪里，还是要尽量想清楚……等等。&lt;/p&gt;
&lt;h2 id=&#34;5实则虚之虚则实之总结反思必不可少&#34;&gt;&lt;strong&gt;5、实则虚之虚则实之=总结反思必不可少&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;在工作里学习占80%必不可少，但是还是要有20%要跳脱出实践，一方面要尽量广一些，一方面要尽量深一些、抽象一些，二者都偏务虚。比较好的办法是对工作做总结+站在高1-2个层级思考问题（而不是高太多的纸上谈兵），同时尽量多咨询一些同领域的资深专家。但是，我观察到，很多同学不怎么总结切实的方法，而是想读一些什么书就获得魔法，其实效率并不高。&lt;/p&gt;
&lt;h2 id=&#34;6掌握阅读的方法有计划地多读经典&#34;&gt;&lt;strong&gt;6、掌握阅读的方法=有计划地多读经典&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;碎片化阅读很可怕，放下手机拿起大部头的书是第一步。但是时间依然不多，则必须聚焦在多维度的经典，可以少走弯路，较快建立起思考框架。《如何阅读一本书》这本书也在技术的层面给了一些小技巧，当然，更多的技巧，每个人都应该总结出适合自己的。&lt;/p&gt;
&lt;h2 id=&#34;7学以致用知识的转化是手段也是目的&#34;&gt;&lt;strong&gt;7、学以致用=知识的转化是手段也是目的&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;很多人一谈到学以致用，就觉得要对工作生活有直接的帮助，这是很糟糕的认知，这样就会非常功利主义，最终知识结构普遍比较偏颇狭隘。真正的学以致用，范畴是很宽的，比如，你总结出心得、用思考方法用于其他领域的分析、给人讲解、写成PPT、触类旁通等等，只要是动了脑筋，重新被唤起过，都可以算。这方面《费曼学习法》算是一个具体的案例。凡是不能被重新唤起的知识，只是流过了你眼睛耳朵的信息，其实不能算知识，也不属于你。&lt;/p&gt;
&lt;h2 id=&#34;8动机最重要的是动机&#34;&gt;&lt;strong&gt;8、动机=最重要的是动机&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;其实大多数人并不真的喜欢学习或热衷发展，你还是要追问自己要成长发展背后的动机根因是什么。有些人就是为了钱，地位，有的人就是为了解决焦虑感，有的人就是想跟进动态的新闻八卦，等等，这些都不是为了所谓发展，寻找好的岗位和赛道，发展是顺水推舟，如果没有合适的环境，发展就是逆水行舟，&lt;strong&gt;需要真正热爱学习和自我塑造，才能坚持得下去&lt;/strong&gt;。
所以，如果弄清楚自己的动机，才能选择适合自己的方式去发展，或者，既然内心并不真正喜欢发展、为什么非要强自己之所难呢？成功并不依赖个体的发展，选择更重要。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>